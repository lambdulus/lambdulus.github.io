{"version":3,"sources":["components/InputField.tsx","components/Controls.tsx","components/Result.tsx","App.tsx","helpers.ts","serviceWorker.ts","index.tsx"],"names":["style","width","fontSize","border","overflow","outline","resize","borderStyle","InputField","props","content","lines","onChange","caretPosition","react_default","a","createElement","value","placeholder","autoFocus","autoComplete","autoCorrect","autoCapitalize","spellCheck","rows","Math","max","ref","element","selectionStart","selectionEnd","buttonStyle","background","borderBottom","marginLeft","marginRight","cursor","Controlls","run","stepOver","stepIn","stepBack","canRun","canStepOver","canStepIn","canGoBack","onClick","disabled","ReactPrinter","tree","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rendered","visit","assertThisInitialized","lambda","body","Lambda","printLambdaBody","accumulator","args","argument","name","printLambdaArguments","application","right","Application","left","churchNumber","macro","variable","ASTVisitor","Result","printer","print","inputStyle","margin","marginTop","padding","resultStyle","sidebarStyle","position","top","height","boxShadow","configWrapper","App","bind","parseExpression","onExpressionChange","autoSave","fn","treshold","timer","_len","arguments","length","Array","_key","window","clearTimeout","setTimeout","apply","debounce","getExpressionFromURL","updateFromURL","expression","split","ast","addEventListener","state","steps","previousReduction","autoCloseParenthesis","replaceBackSlash","_this2","controlProps","_this$state","className","type","checked","_","setState","objectSpread","_this$state2","None","normal","NormalEvaluator","nextReduction","perform","_this$state3","event","_this$state4","target","replace","charAt","slice","encoded","encodeURI","location","hash","tokens","tokenize","lambdaLetters","singleLetterVars","parse","console","log","exception","decodeURI","substring","currentExpr","Component","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efcf0281.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react'\n\n\ninterface InputProps {\n  content : string,\n  lines : number,\n  caretPosition : number,\n  onChange (event : ChangeEvent<HTMLTextAreaElement>) : void,\n}\n\nconst style = {\n  width: '100%',\n  fontSize: '3em',\n  border: 'none',\n  overflow: 'auto',\n  outline: 'none',\n  resize: 'none' as any,\n  borderStyle: 'none',\n}\n\nexport default function InputField (props : InputProps) {\n  const { content, lines, onChange, caretPosition } : InputProps = props\n\n    return (\n      <textarea\n        style={ style }\n        onChange={ onChange }\n        value={ content }\n        placeholder='(λ f . (λ x . f (x x)) (λ x . f (x x)))'\n        autoFocus\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoCapitalize=\"off\"\n        spellCheck={ false }\n        rows={ Math.max(lines + 1, 2) }\n        ref={ (element : HTMLTextAreaElement) => {\n          if (element !== null) {\n            element.selectionStart = caretPosition\n            element.selectionEnd = caretPosition\n          }\n        } }\n      />\n    )\n}","import React, { FunctionComponent, } from 'react'\n\n\nexport interface ControlProps {\n  run () : void,\n  stepOver () : void,\n  stepIn () : void,\n  stepBack () : void,\n  canRun : boolean,\n  canStepOver : boolean,\n  canStepIn : boolean,\n  canGoBack : boolean,\n}\n\nconst buttonStyle = {\n  fontSize: '1.5em',\n  background: 'none',\n  borderStyle: 'none',\n\tborderBottom: '2px solid navy',\n  marginLeft: '5px',\n  marginRight: '5px',  \n  cursor: 'pointer',\n  outline: 'none',\n}\n\nexport default function Controlls (props : ControlProps) : JSX.Element {\n  const {\n    run,\n    stepOver,\n    stepIn,\n    stepBack,\n    canRun,\n    canStepOver,\n    canStepIn,\n    canGoBack,\n  } : ControlProps = props\n  \n  return (\n    <div>\n      <button style={ buttonStyle } onClick={ run } disabled={ ! canRun } >RUN</button>\n      <button style={ buttonStyle } onClick={ stepOver } disabled={ ! canStepOver }>STEP OVER</button>\n      <button style={ buttonStyle } onClick={ stepIn } disabled={ true }>STEP IN</button>\n      <button style={ buttonStyle } onClick={ stepBack } disabled={ true }>GO BACK</button>\n    </div>\n  )\n}","import React, { Component } from 'react'\nimport { AST, BasicPrinter, ASTVisitor, Macro, ChurchNumber, Variable, Lambda, Application } from 'lambdulus-core';\n\n\nclass ReactPrinter extends ASTVisitor {\n  // private expression : string = ''\n  private rendered : JSX.Element | null = null\n\n  // TODO: this looks like nonsense\n  // maybe solve it with another Visitor\n  private printLambdaBody (lambda : Lambda) : void {\n    if (lambda.body instanceof Lambda) {\n      this.printLambdaBody(lambda.body)\n    }\n    else {\n      lambda.body.visit(this)\n    }\n  }\n\n  // TODO: this looks like nonsense\n  // maybe solve it with another Visitor\n  private printLambdaArguments (lambda : Lambda, accumulator : JSX.Element) : void {\n    if (lambda.body instanceof Lambda) {\n      const args : JSX.Element = \n      <span>\n        { accumulator } { lambda.body.argument.name() }\n      </span>\n      \n      this.printLambdaArguments(lambda.body, args)\n    }\n    else {\n      this.rendered = accumulator\n    }\n  }\n\n  constructor (\n    public readonly tree : AST,\n  ) {\n    super()\n    this.tree.visit(this)\n  }\n\n  print () : JSX.Element | null {\n    return this.rendered\n  }\n\n  // TODO: this is ugly as hell\n  onApplication(application: Application): void {\n    if (application.right instanceof Application) {\n      application.left.visit(this)\n      const left : JSX.Element | null = this.rendered\n\n      application.right.visit(this)\n      const right : JSX.Element | null = this.rendered\n\n      this.rendered =\n      <span>\n        { left } ( { right } )\n      </span>\n    }\n    else {\n      application.left.visit(this)\n      const left : JSX.Element | null = this.rendered\n\n      application.right.visit(this)\n      const right : JSX.Element | null = this.rendered\n\n      this.rendered =\n      <span>\n        { left } { right }\n      </span>\n    }\n  }\n  \n  // TODO: this is ugly as hell\n  onLambda(lambda: Lambda): void {\n    if (lambda.body instanceof Lambda) {\n      this.printLambdaArguments(lambda, <span>{ lambda.argument.name() }</span>)\n      const args : JSX.Element | null = this.rendered\n\n      this.printLambdaBody(lambda)\n      const body : JSX.Element | null = this.rendered\n\n      this.rendered =\n      <span>\n        (λ { args } . { body } )\n      </span>\n    }\n    else {\n      lambda.argument.visit(this)\n      const args : JSX.Element | null = this.rendered\n\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n\n      this.rendered =\n      <span>\n        (λ { args } . { body } )\n      </span>\n    }\n  }\n  \n  onChurchNumber(churchNumber: ChurchNumber): void {\n    this.rendered = <span>{ churchNumber.name() }</span>\n  }\n  \n  onMacro(macro: Macro): void {\n    this.rendered = <span>{ macro.name() }</span>\n  }\n  \n  onVariable(variable: Variable): void {\n    this.rendered = <span>{ variable.name() }</span>\n  }\n}\n\n\nconst style = {\n  fontSize: '2em',\n\n}\n\nexport default function Result (props : { tree : AST | null }) : JSX.Element | null {\n  const { tree } = props\n\n  if (tree === null) {\n    return null\n  }\n\n  const printer : ReactPrinter = new ReactPrinter(tree)\n\n  return (\n    <span style={ style } >\n      { printer.print() }\n    </span>\n  )\n}","import React, { Component, ChangeEvent } from 'react';\nimport { AST, tokenize, parse, ASTReduction, Token, NormalEvaluator, None } from 'lambdulus-core'\n\nimport InputField from './components/InputField'\nimport Controls, { ControlProps } from './components/Controls'\nimport Result from './components/Result'\nimport { debounce } from './helpers';\n\n\ninterface state {\n  expression : string,\n  lines : number,\n  caretPosition : number,\n  ast : AST | null,\n  steps : number,\n  previousReduction : ASTReduction | null,\n  autoCloseParenthesis : boolean,\n  replaceBackSlash : boolean,\n}\n\nconst inputStyle = {\n  margin: 'auto',\n  marginTop: '5vh',\n  width: '60%',\n  borderBottom: '2px solid gray',\n  padding: '10px',\n}\n\nconst resultStyle = {\n  margin: 'auto',\n  width: '60%',\n  marginTop: '2vh'\n}\n\nconst sidebarStyle = {\n  position: 'absolute' as any,\n  right: '0',\n  top: '0',\n  width: '18%',\n  height: '100%',\n  boxShadow: '-5px 0px 10px gray',\n}\n\nconst configWrapper = {\n  margin: '10px'\n}\n\nexport default class App extends Component<any, state> {\n  constructor (props : object) {\n    super(props)\n    \n    this.run = this.run.bind(this)\n    this.stepOver = this.stepOver.bind(this)\n    this.stepIn = this.stepIn.bind(this)\n    this.stepBack = this.stepBack.bind(this)\n    this.parseExpression = this.parseExpression.bind(this)\n    this.onExpressionChange = this.onExpressionChange.bind(this)\n    this.autoSave = debounce(this.autoSave.bind(this), 500)\n    this.getExpressionFromURL = this.getExpressionFromURL.bind(this)\n    this.updateFromURL = this.updateFromURL.bind(this)\n\n    const expression : string = this.getExpressionFromURL()\n    const lines : number = expression.split('\\n').length\n    const ast : AST | null = this.parseExpression(expression)\n\n    window.addEventListener('hashchange', this.updateFromURL)\n\n    this.state = {\n      expression,\n      lines,\n      caretPosition : 0,\n      ast,\n      steps : 0,\n      previousReduction : null,\n      autoCloseParenthesis : true,\n      replaceBackSlash : true,\n    }\n  }\n\n  render() {\n    const controlProps : ControlProps = {\n      run : this.run,\n      stepOver : this.stepOver,\n      stepIn : this.stepIn,\n      stepBack : this.stepBack,\n      canRun : true,\n      canStepOver : true,\n      canStepIn : true,\n      canGoBack : true,\n    }\n\n    const { ast, steps, expression, lines, caretPosition } = this.state\n\n    return (\n      <div className=\"App\">\n        <div style={ inputStyle }>\n        <InputField content={ expression } lines={ lines } caretPosition={ caretPosition }\n          onChange={ this.onExpressionChange }  />\n        <br />\n        <Controls { ...controlProps } />\n        <br />\n        Steps: { steps }\n        <br />\n        <br />\n        </div>\n        <div style={ sidebarStyle }>\n          <div style={ configWrapper }>\n            <span>Replace \\ with λ</span>\n            <input type='checkbox' checked={ this.state.replaceBackSlash }\n            onChange={ _ => this.setState({ ...this.state, replaceBackSlash : !this.state.replaceBackSlash }) } />\n            <br />\n            <span>Autocomplete parethesis</span>\n            <input type='checkbox' checked={ this.state.autoCloseParenthesis }\n            onChange={ _ => this.setState({ ...this.state, autoCloseParenthesis : !this.state.autoCloseParenthesis}) } />\n            <br />\n          </div>\n        </div>\n        <div style={ resultStyle }>\n          <Result tree={ ast } />\n        </div>\n      </div>\n    );\n  }\n\n  run () {\n    let { ast, steps, previousReduction } = this.state\n    if (ast === null || previousReduction instanceof None) {\n      return\n    }\n\n    while (true) {\n      const normal : NormalEvaluator = new NormalEvaluator(ast)\n    \n      previousReduction = normal.nextReduction\n      if (normal.nextReduction instanceof None) {\n        break\n      }\n    \n      ast = normal.perform() // perform next reduction\n      steps++\n    }\n\n\n    this.setState({ ast, steps, previousReduction })\n  }\n\n  stepOver () {\n    let { ast, steps, previousReduction } = this.state\n    if (ast === null || previousReduction instanceof None) {\n      return\n    }\n\n    const normal : NormalEvaluator = new NormalEvaluator(ast)\n\n    previousReduction = normal.nextReduction  \n    if (normal.nextReduction instanceof None) {\n      return\n    }\n  \n    ast = normal.perform() // perform next reduction\n    steps++\n\n\n    this.setState({ ast, steps, previousReduction })\n  }\n\n  stepIn () {\n\n  }\n\n  stepBack () {\n\n  }\n\n  onExpressionChange (event : ChangeEvent<HTMLTextAreaElement>) : void  {\n    const { autoCloseParenthesis, replaceBackSlash } : state = this.state\n    let { target : { value : expression } } : { target : { value : string } } = event\n    const lines : number = expression.split('\\n').length\n    const caretPosition : number = event.target.selectionEnd\n\n    if (replaceBackSlash) {\n      expression = expression.replace(/\\\\/g, 'λ')\n    }\n    \n    if (autoCloseParenthesis\n        &&\n        expression.charAt(caretPosition - 1) === '('\n    ) {\n      expression = expression.slice(0, caretPosition) + ')' + expression.slice(caretPosition)\n    }\n\n    const ast : AST | null = this.parseExpression(expression)\n\n    this.autoSave(expression)\n    this.setState({ expression, lines, ast, steps : 0 , previousReduction : null, caretPosition })\n  }\n\n  autoSave (expression : string) : void {\n    const encoded : string = encodeURI(expression)\n\n    window.location.hash = encoded\n  }\n\n  parseExpression (expression : string) : AST | null {\n    try {\n      const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ', '~'], singleLetterVars : false })\n      const ast : AST = parse(tokens)\n\n      console.log('successfuly parsed')\n\n      return ast\n    }\n    catch (exception) {\n      console.log('Something went wrong')\n      console.log(exception)\n      return null\n    }\n  }\n\n  getExpressionFromURL () : string {\n    const expression : string = decodeURI(window.location.hash.substring(1))\n    return expression\n  }\n\n  updateFromURL () : void {\n    const { expression : currentExpr } : state = this.state\n    const expression : string = this.getExpressionFromURL()\n    const lines : number = expression.split('\\n').length\n\n    if (currentExpr === expression) {\n      // breaking cyclic update\n      console.log('ALREADY SYNCED')\n      return\n    }\n\n    const ast : AST | null = this.parseExpression(expression)\n\n    this.setState({ expression, lines, ast, steps : 0, previousReduction : null })\n  }\n}","export function debounce (fn : Function, treshold : number) {\n  let timer : number\n  \n  return function debounced (...args : Array<any>) {\n  \twindow.clearTimeout(timer)\n\n  \ttimer = window.setTimeout(() => {\n    \tfn(...args)\n    }, treshold)\n  }\n}\n\n// intentionaly not handling `this` - I don't want debounced callback to (ab)use `this`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}