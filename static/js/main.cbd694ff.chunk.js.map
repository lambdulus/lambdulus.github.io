{"version":3,"sources":["components/Editor.tsx","misc/index.ts","components/Controls.tsx","components/ReactPrinter.tsx","components/ReductionMessage.tsx","components/Step.tsx","components/Evaluator.tsx","components/MacroDefinition.tsx","components/Box.tsx","components/Note.tsx","components/MenuBar.tsx","components/ExpressionSpace.tsx","components/MacroSpace.tsx","App.tsx","components/TreeComparator.ts","serviceWorker.ts","index.tsx"],"names":["ActionType","Editor","props","placeholder","expression","caretPosition","onExpression","onEnter","onRun","onReset","syntaxError","isMarkDown","strategy","onStrategy","singleLetterNames","onSingleLetterNames","isExercise","onExercise","action","onActionClick","onActionSelect","lines","split","length","react_default","a","createElement","className","concat","InputField","onChange","event","target","value","selectionEnd","replace","onKeyDown","shiftKey","ctrlKey","key","preventDefault","wrap","autoFocus","autoComplete","autoCorrect","autoCapitalize","spellCheck","rows","Math","max","ref","element","selectionStart","focus","trimStr","str","trim","HANDY_MACROS","FACT","FACCT","FIB","APPEND","LISTGREQ","LISTLESS","LISTGR","LISTEQ","QUICKSORT","INFLIST","REMOVENTH","NTH","LEN","GETNTH","MAP","REDUCE","APPLY","RANGE","LISTCOMPR","MOD","INFIX","getExpressionFromURL","decodeURI","window","location","hash","substring","require","Switch","Radio","Controls","__key","isActive","makeActive","makeExercise","endExercise","id","checked","e","shape","ReactPrinter","tree","onClick","redex","breakpoints","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rendered","argument","visit","assertThisInitialized","lambda","accumulator","_this2","body","Lambda","context","isBreakpoint","name","args","identifier","Symbol","type","Beta","broken","Set","printMultiLambda","node","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","iterator","next","done","err","return","application","leftClassName","rightClassName","set","left","right","Application","_this3","acc","churchNumber","_this4","Expansion","macro","_this5","variable","ASTVisitor","ReductionMessage","lastReduction","Alpha","Eta","Step","stepRecord","addBreakpoint","children","ast","step","message","normal","strategyToEvaluator","nextReduction","printer","print","Evaluator","bind","_this$props","state","updateState","editor","history","isRunning","onDoubleClick","from","to","sequence","fn","result","Array","i","mapLeftFromTo","editExpression","breakpoint","_this$props2","toConsumableArray","PureComponent","MacroDefinition","_props$state","macroName","macroExpression","BoxType","ReactMarkdown","Note","note","isEditing","source","Box","Evaluator_Evaluator","MenuBar","onImport","onScreenChange","screen","dehydrated","objectSpread","submittedExpressions","map","dehydrateBox","dehydrate","link","content","data","Blob","URL","createObjectURL","createURL","JSON","stringify","Screen","main","macrolist","href","download","setTimeout","revokeObjectURL","accept","files","file","reader","FileReader","onload","parse","macroTable","box","_ref","config","singleLetterVars","tokens","tokenize","lambdaLetters","parseExpression","None","isNormalForm","hydrateBox","hydrate","readAsText","onFiles","htmlFor","timeoutID","EvaluatorSpace","removeExpression","activeBox","addEmptyExp","addEmptyNote","_updateState","_x","apply","arguments","toString","_removeExpression","_makeActive","MacroSpace","removeMacro","entries","builtinMacros","_ref2","slicedToArray","_ref3","_ref4","PromptPlaceholder","EvaluationStrategy","TreeComparator","roots","translator","Map","equals","_roots","_roots2","toArray","slice","compare","createClass","_this$context","backup","Macro","ChurchNumeral","Variable","get","NORMAL","NormalEvaluator","APPLICATIVE","ApplicativeEvaluator","OPTIMISATION","OptimizeEvaluator","App","updateFromURL","_debounce","treshold","timer","_len","_key","clearTimeout","debounce","updateURL","_debounce2","update","cancel","cancelUpdate","onSubmit","onRemoveExpression","updateMacros","onUpdateEvaluationState","onRemoveMacro","onStep","onRemoveLastStep","onExerciseStep","_onRun","__onRun","onStop","onClear","shouldBreak","isNote","addEventListener","editorState","INIT","ENTER_EXPRESSION","localStorage","getItem","_this$state","_this$state$editorSta","changeStrategy","setState","notebooks","App_Switch","disabled","App_Radio","style","index","enable","NEXT_STEP","RUN","ENTER_EXERCISE","console","log","Date","now","timeout","pushState","encodeURI","_this$state2","activeExpression","_this$state3","_this$state4","evalState","push","clone","onUpdateBoxState","_this$state5","pop","find","add","perform","_this$state6","reduction","has","_this$state7","_this$state8","userAst","_this$state9","VALIDATE_MODE","exception","_this$state10","_this$state11","_this$state11$editorS","indexOf","isMacroDefinition","_expression$split$map","_expression$split$map2","macroState","newMacroTable","defineProperty","noteState","evaluationState","EVAL_MODE","currentExpr","setItem","Component","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbd694ff.chunk.js","sourcesContent":["import React, { ChangeEvent, useState, SetStateAction, Dispatch, KeyboardEvent } from 'react'\n// import { SplitButton, Dropdown } from 'react-bootstrap'\n\n\nimport './EditorStyle.css'\nimport { EvaluationStrategy } from '../App';\n\n\nexport enum ActionType {\n  ENTER_EXPRESSION = 'Enter Expression',\n  ENTER_EXERCISE = 'Enter Exercise',\n  NEXT_STEP = 'Next Step',\n  RUN = 'Run',\n  ENTER_MD = 'Enter MarkDown',\n}\n\ninterface EditorProperties {\n  placeholder: string\n  expression : string\n  caretPosition : number\n  onExpression (newExpression : string, caretPosition : number) : void\n  onEnter () : void\n  onRun () : void\n  onReset () : void\n  onStrategy (strategy : EvaluationStrategy) : void\n  // onDelete () : void\n  // onStepBack () : void\n  syntaxError : Error | null\n  strategy : EvaluationStrategy\n  singleLetterNames : boolean\n  onSingleLetterNames (enable : boolean) : void\n  isExercise : boolean,\n  onExercise (enable : boolean) : void\n  action : ActionType\n  onActionClick () : void\n  onActionSelect (action : ActionType) : void\n  isMarkDown : boolean\n}\n\nexport default function Editor (props : EditorProperties) : JSX.Element {\n  const {\n    placeholder,\n    expression,\n    caretPosition,\n    onExpression,\n    onEnter,\n    onRun,\n    onReset,\n    syntaxError,\n    strategy,\n    onStrategy,\n    singleLetterNames,\n    onSingleLetterNames,\n    isExercise,\n    onExercise,\n    // onDelete,\n    // onStepBack,\n    action,\n    onActionClick,\n    onActionSelect,\n    isMarkDown,\n  } : EditorProperties = props\n  const lines : number = expression.split('\\n').length\n\n  const onChange = (event : ChangeEvent<HTMLTextAreaElement>) => {\n    let { target : { value : expression } } : { target : { value : string } } = event\n    const caretPosition : number = event.target.selectionEnd\n\n    expression = expression.replace(/\\\\/g, 'λ')\n\n    onExpression(expression, caretPosition)\n  }\n\n  const onKeyDown = (event : KeyboardEvent<HTMLTextAreaElement>) => {\n    if (! event.shiftKey && ! event.ctrlKey && event.key === 'Enter') {\n      if (isMarkDown) {\n        return\n      }\n      event.preventDefault()\n      onEnter()\n    }\n\n    if (event.shiftKey && event.key === 'Enter' && isMarkDown) {\n      event.preventDefault()\n      onEnter()\n    }\n    if (event.ctrlKey && event.key === 'Enter') {\n      event.preventDefault()\n      onRun()\n    }\n\n    if (event.ctrlKey && event.key === 'r') {\n      event.preventDefault()\n      onReset()\n    }\n\n  }\n\n  return (\n    <div className='editorContainer'>\n      {/* <p className='badge'>ENTER for STEP</p>\n      <p className='badge'>CTRL + ENTER for RUN</p>\n      <p className='badge'>CTRL + R for RESET</p> */}\n\n      {\n        syntaxError ?\n        <p className='editorError'>\n          { `${syntaxError}` }\n        </p>\n        :\n        null\n      }\n      \n\n      <div className=\"editor\">\n        <InputField\n          placeholder={ placeholder }\n          expression={ expression }\n          lines={ lines }\n          caretPosition={ caretPosition }\n          onChange={ onChange }\n          onKeyDown={ onKeyDown }\n        />\n        {/* <SplitButton\n          title={ action }\n          id='editorSplitDropBtn'\n          onClick={ onActionClick }\n        >\n          <Dropdown.Item onSelect={ onActionSelect } eventKey={ ActionType.ENTER_EXPRESSION }>{ ActionType.ENTER_EXPRESSION }</Dropdown.Item>\n          <Dropdown.Item onSelect={ onActionSelect } eventKey={ ActionType.ENTER_EXERCISE }>{ ActionType.ENTER_EXERCISE }</Dropdown.Item>\n          <Dropdown.Item onSelect={ onActionSelect } eventKey={ ActionType.NEXT_STEP }>{ ActionType.NEXT_STEP }</Dropdown.Item>\n          <Dropdown.Item onSelect={ onActionSelect } eventKey={ ActionType.RUN }>{ ActionType.RUN }</Dropdown.Item>\n          <Dropdown.Item onSelect={ onActionSelect } eventKey={ ActionType.ENTER_MD } active>{ ActionType.ENTER_MD }</Dropdown.Item>\n        </SplitButton> */}\n        </div>\n        \n\n    </div>\n  )\n}\n\ninterface InputProps {\n  placeholder : string\n  expression : string\n  lines : number\n  caretPosition : number\n  onChange (event : ChangeEvent<HTMLTextAreaElement>) : void\n  onKeyDown (event : KeyboardEvent<HTMLTextAreaElement>) : void\n}\n\nfunction InputField (props : InputProps) : JSX.Element {\n  const { placeholder, expression, lines, onChange, onKeyDown, caretPosition } : InputProps = props\n\n  return (\n    <textarea\n      className='prompt'\n      onKeyDown={ onKeyDown }\n      onChange={ onChange }\n      value={ expression }\n      placeholder={ placeholder }\n      wrap='hard'\n      autoFocus\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={ false }\n      rows={ Math.max(lines, 1) } \n      ref={ (element : HTMLTextAreaElement) => {\n        if (element !== null) {\n          element.selectionStart = caretPosition\n          element.selectionEnd = caretPosition\n          element.focus()\n        }\n      } }\n    />\n  )\n}","import { MacroMap } from \"lambdulus-core\";\n\nexport function debounce (fn : Function, treshold : number)\n : [ (...args : Array<any>) => void, () => void ] {\n  let timer : number\n  \n  return [\n    function debounced (...args : Array<any>) : void {\n      window.clearTimeout(timer)\n\n      timer = window.setTimeout(() => {\n        fn(...args)\n      }, treshold)\n    },\n    function cancel () : void {\n      window.clearTimeout(timer)\n    }\n  ]\n}\n\nexport function mapRightFromTo(\n  from : number,\n  to : number,\n  sequence : Array<any>,\n  fn : (...args : Array<any>) => any) {\n    const result : Array<any> = new Array(to - from + 1)\n\n    for (let e = 0, i = to; i >= from; --i) {\n      result[e++] = fn(sequence[i], i)\n    }\n\n    return result\n  }\n\n  export function mapLeftFromTo(\n    from : number,\n    to : number,\n    sequence : Array<any>,\n    fn : (...args : Array<any>) => any) {\n      const result : Array<any> = new Array(to - from + 1)\n  \n      for (let e = 0, i = from; i <= to; ++i) {\n        result[e++] = fn(sequence[i], i)\n      }\n  \n      return result\n    }\n\nexport function trimStr (str : string) : string {\n  return str.trim()\n}\n\nexport const HANDY_MACROS : MacroMap = {\n  FACT : '(Y (λ f n . (<= n 1) 1 (* n (f (- n 1)))))',\n  FACCT : '(λ n . (Y (λ f n a . IF (= n 1) a (f (- n 1) (* n a)))) (- n 1) (n))',\n  FIB : '(Y (λ f n . (= n 0) 0 ((= n 1) 1 ( + (f (- n 1)) (f (- n 2))))))',\n  // SHORTLIST : 'CON 3 (CONS 5 (CONS 1 NIL))',\n  // LONGLIST :  '(CONS 3 (CONS 5 (CONS 1 (CONS 10 (CONS 7 (CONS 2 (CONS 4 (CONS 9 (CONS 4 (CONS 6 (CONS 8 NIL)))))))))))',\n  APPEND : 'Y (λ fn listA listB . IF (NULL listA) (listB) (CONS (FIRST listA) (fn (SECOND listA) listB)))',\n  LISTGREQ : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (>= (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n  LISTLESS : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (< (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n  LISTGR : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (> (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n  LISTEQ : 'Y (λ fn piv list . IF (NULL list) (NIL) ( IF (= (FIRST list) piv) (CONS (FIRST list) (fn piv (SECOND list))) (fn piv (SECOND list)) ) )',\n  QUICKSORT : 'Y (λ fn list . IF (NULL list) (NIL) ( IF (NULL (SECOND list)) (list) ( APPEND (fn (LISTLESS (FIRST list) list)) ( APPEND (LISTEQ (FIRST list) list) (fn (LISTGR (FIRST list) list)) ) ) ) )',\n  INFLIST : '(λ n . (Y (λ x . (λ f s g . g f s) n x)))',\n  REMOVENTH : 'Y (λ fn list n . IF (= n 0) (SECOND list) (IF (NULL list) NIL (CONS (FIRST list) (fn (SECOND list) (- n 1) ) ) ) )',\n  NTH : 'Y (λ fn list n . IF (= n 0) (FIRST list) (IF (NULL (list)) NIL (fn (SECOND list) (- n 1)) ) )',\n  LEN : 'Y (λ fn list . IF (NULL list) (0) (+ 1 (fn (SECOND list) )) )',\n  GETNTH : '(λ end . (Y (λ f n i . (end i) (i) ( (= n 0) (Y (λ f a . (end a) (i) (f) ) ) (f (- n 1)) ) )) )',\n  MAP : '(λ fn l . (Y (λ f it . IF (NULL it) (NIL) (CONS (fn (FIRST it)) (f (SECOND it))) )) l )',\n  REDUCE : '(λ fn l init . Y (λ f it acc . IF (NULL it) (acc) (f (SECOND it) (fn (FIRST it) acc)) ) l init )',\n  APPLY : '(λ f args . Y (λ ff f l . (NULL l) (f) (ff (f (FIRST l)) (SECOND l)) ) f args )',\n  RANGE : '(λ m n . Y (λ f e . (= e n) (CONS e NIL) (CONS e (f (+ e 1))) ) m )',\n  LISTCOMPR : '(λ args . APPLY (λ op in rng cond . Y (λ f l . (NULL l) (NIL) ( (cond (FIRST l)) (CONS (op (FIRST l)) (f (SECOND l))) (CONS (FIRST l) (f (SECOND l))) ) ) rng ) args )',\n  MOD : '(λ n m . (n (λ n . (= n (- m 1)) (0) (+ n 1)) (0)) )',\n  INFIX : 'APPLY (λ l op r . op l r)',\n}\n\n// TODO: does not have to be in this class\nexport function getSavedMacros () : MacroMap {\n  return JSON.parse(window.localStorage.getItem('macrotable') || '{}')\n}\n\n// TODO: does not have to be in this class\nexport function isMacroDefinition (expression : string) : boolean {\n  // TODO: check if first part of macro assignment is valid identifier\n  // TODO: check if second part of macro assignment is valid lambda expression\n\n  try {\n    return expression.indexOf(':=') > 0\n  }\n  catch (exception) {\n    return false\n  }\n}\n\n// TODO: does not have to be in this class\nexport function getExpressionFromURL () : string {\n  return decodeURI(window.location.hash.substring(1))\n}","import React, { ChangeEvent } from 'react'\nconst { Switch, Radio } = require('pretty-checkbox-react')\n\n// import { Button } from '@material/react-button'\n// import '@material/react-button/dist/button.css'\n\n// import { ChipSet, Chip } from '@material/react-chips'\n// import \"@material/react-chips/dist/chips.css\"\n\nimport './ControlsStyle.css'\nimport { EvaluationStrategy } from '../App';\n\n// import '@material/react-tab-bar/dist/tab-bar.css'\n// import '@material/react-tab-scroller/dist/tab-scroller.css'\n// import '@material/react-tab/dist/tab.css'\n// import '@material/react-tab-indicator/dist/tab-indicator.css'\n// import Tab from '@material/react-tab'\n// import TabBar from '@material/react-tab-bar'\n\nexport interface ControlsProps {\n  __key : string\n  isRunning : boolean\n  isActive : boolean\n  makeActive () : void\n  isExercise : boolean\n  makeExercise () : void\n  endExercise () : void\n  strategy : EvaluationStrategy\n  onStrategy (strategy : EvaluationStrategy) : void\n  singleLetterNames : boolean\n}\n\nexport default function Controls (props : ControlsProps) : JSX.Element {\n  const {\n    __key,\n    isActive,\n    makeActive,\n    isExercise,\n    makeExercise,\n    endExercise,\n    strategy,\n    onStrategy,\n    singleLetterNames,\n  } : ControlsProps = props\n\n  return (\n    <div id=\"controls\">\n      \n      {\n        // isActive ?\n          <div>\n            {/* <div className='badge inlineblock'>\n              active\n            </div> */}\n            {/* {\n              singleLetterNames ?\n              <div className='badge inlineblock'>\n                Single Letter Names\n              </div>\n                :\n                null\n            } */}\n            {\n              <Switch\n                className='exerciseSwitch'\n                checked={ isExercise }\n                onChange={ (e : ChangeEvent<HTMLInputElement>) =>\n                  e.target.checked ? makeExercise() : endExercise()\n                }\n                shape=\"fill\"\n              >\n                Exercise\n              </Switch>\n\n              // isExercise ?\n              //   <button\n              //     className='controlBtn'\n              //     onClick={ endExercise }\n              //   >\n              //     end exercise\n              //   </button>\n              //   :\n              //   <button\n              //     className='controlBtn'\n              //     onClick={ makeExercise }\n              //   >\n              //     make exercise\n              //   </button>\n            }\n            {/* <div className='badge'>\n              <div className='strategyName inlineblock'>\n                { strategy }\n              </div>\n              <div className='strategies inlineblock'>\n                <Radio style=\"fill\" name={ \"strategy\" + __key } checked={ strategy === EvaluationStrategy.NORMAL } onChange={ () => onStrategy(EvaluationStrategy.NORMAL) } >Normal Evaluation</Radio>\n                <Radio style=\"fill\" name={ \"strategy\" + __key } checked={ strategy === EvaluationStrategy.APPLICATIVE } onChange={ () => onStrategy(EvaluationStrategy.APPLICATIVE) } >Applicative Evaluation</Radio> */}\n                {/* <Radio style=\"fill\" name={ \"strategy\" + __key } checked={ strategy === EvaluationStrategy.OPTIMISATION } onChange={ () => onStrategy(EvaluationStrategy.OPTIMISATION) } >Optimisation</Radio> */}\n              {/* </div>\n            </div> */}\n          </div>\n\n\n\n\n            // :\n\n\n\n\n        // <button\n        //   className='controlBtn'\n        //   color=\"primary\"\n        //   onClick={ makeActive }\n        // >\n        //   make active\n        // </button>\n      }\n      \n      {/* <i\n        className=\"fas fa-redo-alt fa-2x\"\n        onClick={ onClear }\n       />\n\n      <button className='controlButton' onClick={ onClear } disabled={ isRunning }>CLEAR</button> */}\n    </div>\n  )\n}","import React from 'react'\n\nimport { ASTVisitor, Lambda, Variable, Beta, AST, Application, ChurchNumeral, Expansion, Macro } from \"lambdulus-core\";\n\nimport { Breakpoint } from \"./Evaluator\";\n\n\nexport default class ReactPrinter extends ASTVisitor {\n  private rendered : JSX.Element | null = null\n  private argument : Variable | null = null\n\n  private printMultiLambda (lambda : Lambda, accumulator : JSX.Element) : void {\n    if (lambda.body instanceof Lambda) {\n      const context : Variable = lambda.body.argument\n      let className : string = 'argument'\n\n      if (this.isBreakpoint(lambda.body.argument)) {\n        className += ' breakpoint'\n      }\n\n      // TODO: same here\n      if (this.argument\n          &&\n          this.argument.name() === context.name()) {\n            className += ' substitutedArg'\n        }\n\n      const args : JSX.Element = (\n        <span className='arguments'>\n          { accumulator } {' '}\n          <span\n            className={ className }\n            onClick={ () => {\n              (context as any).identifier = Symbol()\n              this.onClick({ type : Beta, context, broken : new Set }) }\n            }\n          >\n            { context.name() }\n          </span>\n        </span>\n      )\n      \n      this.printMultiLambda(lambda.body, args)\n    }\n    else {\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n      this.rendered = accumulator\n\n      this.rendered = (\n        <span className='function'>\n          (\n          <span\n            className='lambda'\n            // onClick={ () => {\n            //   (lambda as any).identifier = Symbol()\n            //   this.onClick({ type : Beta, context : lambda, broken : new Set })}\n            // }\n            >\n              λ { ' ' }\n          </span>\n          { accumulator } . { body }\n          )\n        </span>\n      )\n    }\n  }\n\n  isBreakpoint (node : AST) : boolean {\n    for (const breakpoint of this.breakpoints) {\n      if (breakpoint.context.identifier === node.identifier) {\n        return true\n      }\n    }\n    return false\n  }\n\n  constructor (\n    public readonly tree : AST,\n    private readonly onClick : (breakpoint : Breakpoint) => void,\n    private readonly redex : AST | null,\n    private readonly breakpoints : Array<Breakpoint>,\n  ) {\n    super()\n    this.tree.visit(this)\n  }\n\n  print () : JSX.Element | null {\n    return this.rendered\n  }\n\n  // TODO: little bit refactored, maybe keep going\n  onApplication (application: Application) : void {\n    let leftClassName : string = 'left'\n    let rightClassName : string = 'right'\n    let set : boolean = false\n\n    if (this.redex !== null\n          &&\n        this.redex.identifier === application.identifier // tohle je asi trosku useles\n          &&\n        this.redex === application\n      ) {\n        leftClassName += ' redex'\n        rightClassName += ' redex'\n\n        // TODO: this is probably not good and should be done other way\n\n        if (application.left instanceof Lambda) {\n          this.argument = application.left.argument\n          set = true\n        }\n    }\n\n    if (application.right instanceof Application) {\n      application.left.visit(this)\n      const left : JSX.Element | null = <span className={ leftClassName }>{this.rendered}</span>\n\n      // tohle delam proto, ze se nesmi vypnout this.argument u libovolne aplikace, jenom u te ktera ho setnula\n      // priklad + 2 3a krokuj - zakomentuj a krokuj znovu Y se bude chovat spatne hned v prvnich krocich\n      if (set) {\n        this.argument = null\n      }\n\n      application.right.visit(this)\n      const right : JSX.Element | null = <span className={ rightClassName }>( { this.rendered } )</span>\n\n      this.rendered =\n      <span className='application'>\n        { left } { right }\n      </span>\n    }\n    else {\n      application.left.visit(this)\n      const left : JSX.Element | null = <span className={ leftClassName }>{this.rendered}</span>\n\n      // tohle delam proto, ze se nesmi vypnout this.argument u libovolne aplikace, jenom u te ktera ho setnula\n      // priklad + 2 3a krokuj - zakomentuj a krokuj znovu Y se bude chovat spatne hned v prvnich krocich\n      if (set) {\n        this.argument = null\n      }\n\n      application.right.visit(this)\n      const right : JSX.Element | null = <span className={ rightClassName }>{ this.rendered }</span>\n\n      this.rendered =\n      <span className='application'>\n        { left } { right }\n      </span>\n    }\n  }\n  \n  // TODO: little bit refactored, maybe keep going\n  onLambda (lambda: Lambda) : void {\n    // TODO: this seems also not smart and clean\n    let argument : Variable | null = this.argument\n    if (this.argument !== lambda.argument\n        &&\n        this.argument !== null\n        &&\n        this.argument.name() === lambda.argument.name()) {\n      this.argument = null\n    }\n\n\n    // multilambda\n    if (lambda.body instanceof Lambda) {\n      const context : Variable = lambda.argument\n      let className : string = 'argument'\n\n      if (this.isBreakpoint(lambda.argument)) {\n        className += ' breakpoint'\n      }\n\n      // TODO: same here\n      if (this.argument\n        &&\n        this.argument.name() === context.name()) {\n          className += ' substitutedArg'\n      }\n\n      const acc : JSX.Element = (\n        <span\n          className={ className }\n          onClick={ () => {\n            (context as any).identifier = Symbol()\n            this.onClick({ type : Beta, context, broken : new Set }) }\n          }\n        >\n          { lambda.argument.name() }\n        </span>\n      )\n\n      this.printMultiLambda(lambda, acc)\n    }\n    else {\n      const context : Variable = lambda.argument\n\n      lambda.argument.visit(this)\n      const args : JSX.Element | null = this.rendered\n\n      lambda.body.visit(this)\n      const body : JSX.Element | null = this.rendered\n\n      let className : string = 'argument'\n\n      if (this.isBreakpoint(lambda.argument)) {\n        className += ' breakpoint'\n      }\n\n      this.rendered = (\n        <span className='function' >\n          (\n          <span\n            className='lambda'\n            // onClick={ () => {\n            //   (lambda as any).identifier = Symbol()\n            //   this.onClick({ type: Beta, context: lambda, broken : new Set })}\n            // }\n            >\n              λ { ' ' }\n          </span>\n          <span\n            className={ className }\n            onClick={ () => {\n              (context as any).identifier = Symbol()              \n              this.onClick({ type : Beta, context, broken : new Set }) }\n            }\n          >\n            { args } { ' ' }\n          </span>\n          . { body } \n          )\n        </span>\n      )\n    }\n\n    if (argument !== null) {\n      this.argument = argument\n    }\n  }\n  \n  // TODO: little bit refactored, maybe keep going\n  onChurchNumeral (churchNumber: ChurchNumeral) : void {\n    let className : string = 'churchnumeral'\n\n    if (this.redex !== null\n          &&\n        this.redex.identifier === churchNumber.identifier\n          &&\n        this.redex === churchNumber\n      ) {\n        className += ' redex'\n    }\n\n    if (this.isBreakpoint(churchNumber)) {\n      className += ' breakpoint'\n    }\n\n    this.rendered = (\n      <span\n        className={ className }\n        onClick={ () => {\n          (churchNumber as any).identifier = Symbol()\n          this.onClick({ type: Expansion, context : churchNumber, broken : new Set }) }\n        }\n      >\n        { churchNumber.name() }\n      </span>\n    )\n  }\n\n  // TODO: little bit refactored, maybe keep going  \n  onMacro (macro: Macro) : void {\n    let className = 'macro'\n\n    if (this.redex !== null && this.redex.identifier === macro.identifier && this.redex === macro) {\n      className += ' redex'\n    }\n\n    if (this.isBreakpoint(macro)) {\n      className += ' breakpoint'\n    }\n\n    this.rendered = (\n      <span\n        className={ className }\n        onClick={ () => {\n          (macro as any).identifier = Symbol()\n          this.onClick({ type: Expansion, context : macro, broken : new Set }) }\n        }\n      >\n        { macro.name() }\n      </span>\n    )\n  }\n  \n  onVariable (variable: Variable): void {\n    // TODO: same here - not so clean\n    let className : string = 'variable'\n\n    if (this.argument\n        &&\n        this.argument.name() === variable.name()) {\n          className += ' substitutedArg'\n      }\n\n    this.rendered = <span className={ className } >{ variable.name() }</span>\n  }\n}","import React from 'react'\nimport { ASTReduction, Beta, Alpha, Expansion } from 'lambdulus-core';\nimport { Eta } from 'lambdulus-core/dist/reductions/eta';\n\n\ninterface ReductionMessageProperties {\n  lastReduction : ASTReduction | null\n}\n\nexport default function ReductionMessage (props : ReductionMessageProperties) : JSX.Element {\n  const { lastReduction } = props\n\n  if (lastReduction === null) {\n    return null as any\n  }\n\n  if (lastReduction instanceof Beta) {\n    return (\n      <p className='lastReduction'>\n        β reduction\n      </p>\n    )\n  }\n\n  if (lastReduction instanceof Alpha) {\n    return (\n      <p className='lastReduction'>\n        α conversion\n      </p>\n    )\n  }\n\n  if (lastReduction instanceof Expansion) {\n    return (\n      <p className='lastReduction'>\n        Macro expansion\n      </p>\n    )\n  }\n\n  if (lastReduction instanceof Eta) {\n    return (\n      <p className='lastReduction'>\n        η conversion\n      </p>\n    )\n  }\n\n  else {\n    return null as any\n  }\n  \n}","import React from 'react'\n\nimport { AST, Beta, Expansion, NormalEvaluator, ASTReduction } from 'lambdulus-core';\n\nimport './StepStyle.css'\nimport { Breakpoint, StepRecord } from './Evaluator'\nimport ReactPrinter from './ReactPrinter';\nimport ReductionMessage from './ReductionMessage';\nimport { strategyToEvaluator, EvaluationStrategy, Evaluator } from '../App';\n\n\ninterface StepProperties {\n  stepRecord : StepRecord\n  breakpoints : Array<Breakpoint>\n  addBreakpoint (breakpoint : Breakpoint) : void\n  children : JSX.Element\n  strategy : EvaluationStrategy\n}\n\nexport default function Step (props : StepProperties) : JSX.Element | null {\n  const { stepRecord, addBreakpoint, breakpoints, children, strategy } = props\n  const { ast : tree, lastReduction, step, message } = stepRecord\n\n  if (tree === null) {\n    return null\n  }\n\n  // TODO: tohle se musi fixnout\n  // validni redex se musi dostat ze statu a ne si ho tedka vymyslet sam\n\n  let redex : AST | null  = null\n  // const normal : Evaluator = new NormalEvaluator(tree)\n  const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(tree)\n  \n  if (normal.nextReduction instanceof Beta) {\n    redex = normal.nextReduction.redex\n  }\n  \n  if (normal.nextReduction instanceof Expansion) {\n    redex = normal.nextReduction.target\n  }\n\n  const printer : ReactPrinter = new ReactPrinter(tree, addBreakpoint, redex, breakpoints)\n\n  return (\n    <span className='step'>\n      <ReductionMessage lastReduction={ lastReduction } />\n      <div className='inlineblock' >\n        <p className='stepNumber' >\n          { step } :\n        </p>\n        { printer.print() }\n        { children }\n        {\n          stepRecord.message === '' ?\n            null\n            :\n            <p className='stepMessage'>\n              { stepRecord.message }\n            </p>\n        }\n      </div>\n    </span>\n  )\n}","import React, { PureComponent } from 'react'\n\nimport { AST, ASTReduction, None, NormalEvaluator, Beta, Lambda, Variable, Expansion, ChurchNumeral, Macro, } from \"lambdulus-core\";\n\nimport './EvaluatorStyle.css'\nimport Controls from './Controls';\nimport Step from './Step';\nimport { mapRightFromTo, mapLeftFromTo } from '../misc'\nimport { BoxType } from './Box';\nimport { EvaluationStrategy } from '../App';\n\n\nexport type Breakpoint = {\n  type : ASTReduction,\n  context : AST,\n  broken : Set<AST>,\n}\n\nexport interface StepRecord {\n  ast : AST\n  lastReduction : ASTReduction | null\n  step : number\n  message : string\n  isNormalForm : boolean\n}\n\nexport interface EvaluationState {\n  __key : string\n  type : BoxType\n  expression : string\n  ast : AST | null\n  history : Array<StepRecord>\n  // steps : number\n  isRunning : boolean\n  // lastReduction : ASTReduction | null\n  breakpoints : Array<Breakpoint>\n  timeoutID : number | undefined\n  timeout : number\n  isExercise : boolean\n  strategy : EvaluationStrategy\n  singleLetterNames : boolean\n}\n\nexport interface EvaluationStatePatch {\n  __key? : string\n  type? : BoxType\n  expression? : string\n  ast? : AST | null\n  history? : Array<StepRecord>\n  // steps? : number\n  isRunning? : boolean\n  // lastReduction? : ASTReduction | null\n  breakpoints? : Array<Breakpoint>\n  timeoutID? : number | undefined\n  timeout? : number\n  isExercise? : boolean\n  strategy? : EvaluationStrategy\n  singleLetterNames? : boolean\n}\n\ninterface EvaluationProperties {\n  state : EvaluationState\n  updateState (state : EvaluationStatePatch) : void\n  editExpression (ast : AST, strategy : EvaluationStrategy, singleLEtterNames : boolean) : void\n  makeActive () : void\n  isActive : boolean\n  editor : JSX.Element\n}\n\nexport default class Evaluator extends PureComponent<EvaluationProperties, EvaluationState> {\n  constructor (props : EvaluationProperties) {\n    super(props)\n\n    this.addBreakpoint = this.addBreakpoint.bind(this)\n  }\n\n  render () : JSX.Element {\n    const { state, updateState, isActive, editor } : EvaluationProperties = this.props\n    const {\n      __key,\n      history,\n      isRunning,\n      breakpoints,\n      isExercise,\n      strategy,\n      singleLetterNames,\n      expression,\n    } : EvaluationState = state\n\n    let className : string = 'box boxEval'\n\n    if (expression === '') {\n      return (\n        <div className={ className + ' inactiveBox' } onDoubleClick={ this.props.makeActive } >\n          <p>Empty expreesion box. Write λ expression and hit enter.</p>\n          {\n            isActive ?\n              (\n                editor\n              )\n              :\n              (\n                <p className='inactiveMessage'>\n                  Collapsing { history.length - 1 } steps. Double click to activate this box.\n                </p>\n              )\n          }\n        </div>\n      )\n    }\n\n    const stepRecord : StepRecord = history[history.length - 1]\n\n    if (isExercise) {\n      className += ' boxExercise'\n    }\n\n    if ( ! isActive) {\n      return (\n        <div className={ className + ' inactiveBox' } onDoubleClick={ this.props.makeActive } >\n          <ul className='UL'>\n            {/* {\n              mapLeftFromTo(0, history.length - 2, history, (stepRecord, i) =>\n                <li key={ i } className='inactiveStep' >\n                  <Step\n                    breakpoints={ breakpoints }\n                    addBreakpoint={ () => {} }\n                    stepRecord={ stepRecord }\n                    strategy={ strategy }\n                  >\n                    <i\n                      className=\"hiddenIcon fas fa-pencil-alt\"\n                      onClick={ () => this.props.editExpression(stepRecord.ast, state.strategy, singleLetterNames) }\n                    />\n                  </Step>\n                </li>)\n            } */}\n            <li key={ 0 } className='activeStep LI'>\n              <Step\n                breakpoints={ breakpoints }\n                addBreakpoint={ () => {} } // blank function - NOOP\n                stepRecord={ history[0] }\n                strategy={ strategy }\n              >\n                <i\n                  className=\"hiddenIcon fas fa-pencil-alt\"\n                  onClick={ () => this.props.editExpression(history[0].ast, state.strategy, singleLetterNames) }\n                />\n              </Step>\n            </li>\n          </ul>\n          <p className='inactiveMessage'>\n            Collapsing { history.length - 1 } steps. Double click to activate this box.\n          </p>\n          {/* <Controls\n            isRunning={ isRunning }\n            isActive={ this.props.isActive }\n            makeActive={ this.props.makeActive }\n            isExercise={ isExercise }\n            makeExercise={ () => this.props.updateState({ isExercise : true }) }\n            endExercise={ () => this.props.updateState({ isExercise : false })  }\n            strategy={ strategy }\n            onStrategy={ (strategy : EvaluationStrategy) => updateState({\n              strategy\n            })  }\n            __key={ __key }\n            singleLetterNames={ singleLetterNames }\n          /> */}\n        </div>\n      )\n    }\n\n    return (\n      <div className={ className }>\n        <ul className='UL'>\n          {\n            mapLeftFromTo(0, history.length - 2, history, (stepRecord, i) =>\n              <li key={ i } className='inactiveStep LI' >\n                <Step\n                  breakpoints={ breakpoints }\n                  addBreakpoint={ () => {} }\n                  stepRecord={ stepRecord }\n                  strategy={ strategy }\n                >\n                  <i\n                    className=\"hiddenIcon fas fa-pencil-alt\"\n                    onClick={ () => this.props.editExpression(stepRecord.ast, state.strategy, singleLetterNames) }\n                  />\n                </Step>\n              </li>)\n          }\n          <li key={history.length - 1} className='activeStep LI'>\n            <Step\n              breakpoints={ breakpoints }\n              addBreakpoint={ this.addBreakpoint }\n              stepRecord={ history[history.length - 1] }\n              strategy={ strategy }\n            >\n                <i\n                  className=\"hiddenIcon fas fa-pencil-alt\"\n                  onClick={ () => this.props.editExpression(history[history.length - 1].ast, state.strategy, singleLetterNames) }\n                />\n            </Step>\n          </li>\n        </ul>\n        <Controls\n          isRunning={ isRunning }\n          isActive={ this.props.isActive }\n          makeActive={ this.props.makeActive }\n          isExercise={ isExercise }\n          makeExercise={ () => this.props.updateState({ isExercise : true }) }\n          endExercise={ () => this.props.updateState({ isExercise : false })  }\n          strategy={ strategy }\n          onStrategy={ (strategy : EvaluationStrategy) => updateState({\n            strategy\n          })  }\n          __key={ __key }\n          singleLetterNames={ singleLetterNames }\n        />\n        { editor }\n\n      </div>\n    )\n  }\n\n  addBreakpoint (breakpoint : Breakpoint) : void {\n    let { state, updateState } : EvaluationProperties = this.props\n  \n    updateState({\n      breakpoints : [ ...state.breakpoints, breakpoint ],\n    })\n  }\n}","import React from 'react'\nimport { BoxType, BoxState } from './Box';\n\n\nexport interface MacroDefinitionState {\n  __key : string\n  type : BoxType\n  macroName : string\n  macroExpression : string\n}\n\nexport interface MacroDefinitionProperties {\n  state : MacroDefinitionState\n}\n\nexport default function MacroDefinition (props : MacroDefinitionProperties) : JSX.Element {\n  const { state : { macroName, macroExpression } } : MacroDefinitionProperties = props\n\n  return (\n    <div className='box boxMacro'>\n      { macroName } := { macroExpression }\n    </div>\n  )\n}","import React from 'react'\nimport Evaluator, { EvaluationState } from './Evaluator';\nimport MacroDefinition, { MacroDefinitionState } from './MacroDefinition';\nimport Note, { NoteState } from './Note';\nimport { AST } from 'lambdulus-core';\nimport { EvaluationStrategy } from '../App';\n\n\nexport enum BoxType {\n  expression,\n  macro,\n  note\n}\n\nexport type BoxState = EvaluationState | MacroDefinitionState | NoteState\n\ninterface BoxProperties {\n  state : BoxState\n  updateState (state : BoxState) : void\n  removeExpression () : void\n  editExpression (ast : AST, strategy : EvaluationStrategy, singleLetterNames : boolean) : void\n  isActive : boolean\n  makeActive () : void\n  editor : JSX.Element\n}\n\nexport default function Box (props : BoxProperties) : JSX.Element {\n  const { state, updateState, isActive } : BoxProperties = props\n  const { type } = state\n\n  if (type === BoxType.expression) {\n    return (\n      <div className=''>\n        <Evaluator\n          state={ state as EvaluationState }\n          updateState={ updateState }\n          editExpression={ props.editExpression }\n          isActive={ isActive }\n          makeActive={ props.makeActive }\n          editor={ props.editor }\n        />\n      </div>\n    )\n  }\n\n  if (type === BoxType.macro) {\n    return (\n      <div className=''>\n        <MacroDefinition state={ state as MacroDefinitionState } />\n      </div>\n    )\n  }\n\n  if (type === BoxType.note) {\n    return (\n      <div className=''>\n        <Note state={ state as NoteState } editor={ props.editor } isActive={ isActive } />\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      I do not know what to do with this yet.\n    </div>\n  )\n}","import React from 'react'\nconst ReactMarkdown = require('react-markdown')\n// const renderers = require('react-markdown-github-renderers')\nimport 'github-markdown-css'\n\nimport { BoxType, BoxState } from './Box';\n\n\nexport interface NoteState {\n  __key : string\n  type : BoxType\n  note : string\n  isEditing : boolean\n}\n\nexport interface NoteProperties {\n  state : NoteState\n  editor : JSX.Element\n  isActive : boolean\n}\n\nexport default function Note (props : NoteProperties) : JSX.Element {\n  const { state : { note } } : NoteProperties = props\n\n  if (props.state.isEditing) {\n    return (\n      <div className='box'>\n        { props.editor }\n      </div>\n    )\n  }\n\n\n  return (\n    <div className='box boxNote markdown-body'>\n      <ReactMarkdown source={ note } />\n    </div>\n  )\n}","import React, { ChangeEvent } from 'react'\n\nimport './TopBarStyle.css'\n\nimport { AppState, Screen } from '../App'\nimport { EvaluationState } from './Evaluator';\nimport { AST, tokenize, parse, Token, MacroMap, None } from 'lambdulus-core';\nimport { BoxState, BoxType } from './Box';\n\n\ninterface MenuBarProperties {\n  state : AppState\n  onImport (state : AppState) : void\n  onScreenChange (screen : Screen) : void\n}\n\nexport default function MenuBar (props : MenuBarProperties) : JSX.Element {\n  const { state, onImport, onScreenChange } : MenuBarProperties = props\n  const { screen } = state\n\n  const dehydrated : object = dehydrate(state)\n\n  const serialized : string = JSON.stringify(dehydrated)\n  const link : string = createURL(serialized)\n\n  return (\n    <div id=\"topbar\">\n        {/* <i className=\"icon fas fa-cog fa-2x\" /> */}\n        <div>\n          <i id='notebooks' className=\"icon fas fa-book-open fa-2x\" />\n          <p className='iconLabel'>Notebooks</p>\n        </div>\n\n        <div>\n          {\n            screen === Screen.main ?\n              <i className=\"icon fas fa-list-ul fa-2x\" onClick={ () => onScreenChange(Screen.macrolist) } />\n              :\n              <i className=\"icon far fa-window-close fa-2x\" onClick={ () => onScreenChange(Screen.main) } />\n          }\n          <p className='iconLabel'>Macros</p>\n        </div>        \n        \n\n        {/* <i className=\"save icon fas fa-save fa-2x\" /> */}\n      <div>\n        <a\n          className='export'\n          href={ link }\n          download=\"notebook_lambdulus.json\"\n          onClick={ () => setTimeout(() => window.URL.revokeObjectURL(link), 10) }\n        >\n          <i id='download' className=\"icon fas fa-cloud-download-alt fa-2x\" />\n        </a>\n        <p className='iconLabel'>Export</p>\n      </div>\n      \n      <div>\n        <input type=\"file\" accept=\"application/json\" id=\"input\" onChange={ (e) => onFiles(e, onImport) } />\n        <label htmlFor=\"input\"><i className=\"icon fas fa-cloud-upload-alt fa-2x\"></i></label>\n        <p className='iconLabel'>Import</p>\n      </div>      \n    </div>\n  )\n}\n\nfunction dehydrateBox (box : BoxState) : BoxState {\n\n  // console.log('dehydrate')\n  const { type } : BoxState = box\n\n  if (type === BoxType.expression) {\n\n    // console.log('dehydrate expression')\n    return {\n      ...box,\n      ast : null as any,\n      history : [],\n      isRunning : false,\n      // lastReduction : null,\n      breakpoints : [],\n      timeoutID : undefined,\n    }\n  }\n\n  // console.log('dehydrate something else')\n\n  return box\n}\n\nfunction dehydrate (state : AppState) : AppState {\n  return {\n    ...state,\n    submittedExpressions : state.submittedExpressions.map(dehydrateBox)\n  }\n}\n\nfunction hydrateBox (box : BoxState, macroTable : MacroMap) : BoxState {\n  const { type } : BoxState = box\n  \n  if (type === BoxType.expression) {\n    const { singleLetterNames } = box as EvaluationState\n    const ast : AST = parseExpression((box as EvaluationState).expression, { macroTable, singleLetterNames })\n\n    return {\n      ...box,\n      ast,\n      history : [ { ast, lastReduction : None, step : 0, message : '', isNormalForm : false } ],\n    }\n  }\n\n  return box\n}\n\nfunction hydrate (dehydrated : AppState) : AppState {\n  const { macroTable } = dehydrated\n  const config = { macroTable }\n\n  return {\n    ...dehydrated,\n    submittedExpressions : dehydrated.submittedExpressions.map((box) => hydrateBox(box, macroTable))\n  }\n}\n\ninterface Config {\n  singleLetterNames : boolean\n  macroTable : MacroMap\n}\n\nfunction parseExpression (expression : string, config : Config) : AST {\n  const { singleLetterNames : singleLetterVars, macroTable } : Config = config\n  \n  const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars })\n  const ast : AST = parse(tokens, macroTable)\n\n  return ast\n}\n\nfunction onFiles (event : ChangeEvent<HTMLInputElement>, onImport : (state : AppState) => void) : void {\n  const { target : { files } } = event\n  if (files === null) {\n    return\n  }\n\n  const file : File = files[0]\n  const reader : FileReader = new FileReader\n  reader.onload = (event : Event) => {\n    const state : AppState = JSON.parse(reader.result as string)\n\n    onImport(hydrate(state))\n  }\n\n  reader.readAsText(file)\n\n  \n}\n\nfunction createURL (content : string) : string {\n  const data = new Blob([ content ], {\n    type: 'application/json'\n  })\n\n  // If we are replacing a previously generated file we need to\n  // manually revoke the object URL to avoid memory leaks.\n  // if (textFile !== null) {\n  //   window.URL.revokeObjectURL(textFile);\n  // }\n\n  return window.URL.createObjectURL(data);\n}","import React from 'react'\nimport Box, { BoxState } from './Box';\nimport { EvaluationState } from './Evaluator';\nimport { AST } from 'lambdulus-core';\nimport { EvaluationStrategy } from '../App';\n\n\nexport interface EvaluatorProperties {\n  submittedExpressions : Array<BoxState>\n  updateState (state : BoxState, index : number) : void\n  removeExpression (index : number) : void\n  editExpression (ast : AST, strategy : EvaluationStrategy, singleLetterNames : boolean) : void\n  activeBox : number\n  makeActive (index : number) : void\n  editor : JSX.Element\n  addEmptyExp () : void\n  addEmptyNote () : void\n}\n\nexport default function EvaluatorSpace (props: EvaluatorProperties) : JSX.Element {\n  const { submittedExpressions, updateState, removeExpression, activeBox, makeActive } = props\n\n  if (submittedExpressions.length === 0) {\n    return (\n      <div className='evaluatorSpace'>\n        <div className='bigEmpty'>\n          <p className='plusBtn' onClick={ props.addEmptyExp }><i>+ λ</i></p>\n          <p className='plusBtn' onClick={ props.addEmptyExp }><i>+ Macro</i></p>\n          <p className='plusBtn' onClick={ props.addEmptyNote }><i>+ MD</i></p>          \n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className='evaluatorSpace'>\n      {\n        submittedExpressions.length ?\n          <ul className='evaluatorList UL'>\n            { submittedExpressions.map((state : BoxState, i : number) =>\n              <li className='LI' key={ state.__key }>\n                <Box\n                  state={ state }\n                  updateState={ (state : EvaluationState) => updateState(state, i) }\n                  removeExpression={ () => removeExpression(i) }\n                  editExpression={ props.editExpression }\n                  isActive={ i === activeBox }\n                  makeActive={ () => makeActive(i) }\n                  editor={ props.editor }\n                />\n              </li>\n              ) }\n              <div className='smallEmpty'>\n                  <p className='plusBtn' onClick={ props.addEmptyExp }><i>+ λ</i></p>\n                  <p className='plusBtn' onClick={ props.addEmptyExp }><i>+ Macro</i></p>\n                  <p className='plusBtn' onClick={ props.addEmptyNote }><i>+ MD</i></p>\n                </div>\n          </ul>\n          :\n          null\n      }\n    </div>\n  )\n}","import React from 'react'\nimport { MacroMap, builtinMacros } from 'lambdulus-core';\n\n\nexport interface MacroProperties {\n  macroTable : MacroMap\n  removeMacro (name : string) : void\n}\n\nexport default function MacroSpace (props : MacroProperties) : JSX.Element {\n  const { macroTable, removeMacro } = props\n\n  return (\n    <div className='macroSpace'>\n      <p>Built-in Macros</p>\n      <ul className='UL'>\n        { Object.entries(builtinMacros).map(([macroName, macroExpression]) =>\n          <div key={ macroName }>\n            <li className='LI'>\n              <div className='box boxMacro'>\n                { macroName } := { macroExpression }\n              </div>\n            </li>\n          </div>\n        ) }\n      </ul>\n\n      <p>User-defined Macros</p>\n      <ul>\n        { Object.entries(macroTable).map(([macroName, macroExpression]) =>\n            <div key={ macroName }>\n              <li className='LI'>\n                <div className='box boxMacro'>\n                  { macroName } := { macroExpression }\n                  <i className=\"hiddenMacroIcon far fa-trash-alt\" onClick={ () => removeMacro(macroName) } />\n                </div>\n              </li>\n            </div>\n          ) }\n      </ul>\n    </div>\n  )\n}","import React, { Component, ChangeEvent } from 'react';\nconst { Switch, Radio } = require('pretty-checkbox-react')\nimport 'pretty-checkbox'\n\nimport {\n  AST,\n  tokenize,\n  parse,\n  Token,\n  MacroMap,\n  None,\n  NormalEvaluator,\n  Expansion,\n  Macro,\n  ChurchNumeral,\n  Variable,\n  Lambda,\n  Beta,\n  ASTReduction,\n  ApplicativeEvaluator,\n  OptimizeEvaluator\n} from 'lambdulus-core'\n\nimport './App.css'\nimport Editor, { ActionType } from './components/Editor'\nimport { debounce, trimStr, HANDY_MACROS, getExpressionFromURL, isMacroDefinition, getSavedMacros } from './misc';\nimport { EvaluationState, Breakpoint, StepRecord } from './components/Evaluator';\nimport TopBar from './components/MenuBar';\nimport { BoxState, BoxType } from './components/Box';\nimport { MacroDefinitionState } from './components/MacroDefinition';\nimport { NoteState } from './components/Note';\nimport EvaluatorSpace from './components/ExpressionSpace';\nimport MacroSpace from './components/MacroSpace';\nimport { TreeComparator } from './components/TreeComparator';\n\n\nexport enum Screen {\n  main,\n  macrolist,\n  notebooks,\n}\n\nexport enum PromptPlaceholder {\n  INIT = 'type λ expression',\n  EVAL_MODE = 'HIT ENTER AGAIN FOR NEXT STEP',\n  VALIDATE_MODE = 'write next step and hit enter for validation',\n}\n\nexport enum EvaluationStrategy {\n  NORMAL = 'Normal Evaluation',\n  APPLICATIVE = 'Applicative Evaluation',\n  OPTIMISATION = 'Optimisation - η Conversion ',\n}\n\nexport type Evaluator = NormalEvaluator | ApplicativeEvaluator | OptimizeEvaluator\n\nexport function strategyToEvaluator (strategy : EvaluationStrategy) : Evaluator {\n  switch (strategy) {\n    case EvaluationStrategy.NORMAL:\n      return NormalEvaluator as any\n \n    case EvaluationStrategy.APPLICATIVE:\n      return ApplicativeEvaluator as any\n\n    case EvaluationStrategy.OPTIMISATION:\n      return OptimizeEvaluator as any\n  }\n}\n\nexport interface AppState {\n  editorState : {\n    placeholder : string\n    expression : string\n    caretPosition : number\n    syntaxError : Error | null\n    strategy : EvaluationStrategy\n    singleLetterNames : boolean\n    isExercise : boolean\n    action : ActionType\n    isMarkDown : boolean\n  }\n  \n  macroTable : MacroMap\n\n  submittedExpressions : Array<BoxState>\n  screen : Screen\n  activeBox : number\n}\n\nexport default class App extends Component<{}, AppState> {\n  constructor (props : object) {\n    super(props)\n\n    this.parseExpression = this.parseExpression.bind(this)\n    this.updateFromURL = this.updateFromURL.bind(this)\n    const [update, cancel] = debounce(this.updateURL.bind(this), 500)\n    this.updateURL = update\n    this.cancelUpdate = cancel\n    this.onExpression = this.onExpression.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onRemoveExpression = this.onRemoveExpression.bind(this)\n    this.updateMacros = this.updateMacros.bind(this)\n    this.onUpdateEvaluationState = this.onUpdateEvaluationState.bind(this)\n    this.onRemoveMacro = this.onRemoveMacro.bind(this)\n    this.onEnter = this.onEnter.bind(this)\n    this.onStep = this.onStep.bind(this)\n    this.onRemoveLastStep = this.onRemoveLastStep.bind(this)\n    this.onExerciseStep = this.onExerciseStep.bind(this)\n    this.onRun = this.onRun.bind(this)\n    this._onRun = this._onRun.bind(this)\n    this.__onRun = this.__onRun.bind(this)\n    this.onStop = this.onStop.bind(this)\n    this.onClear = this.onClear.bind(this)\n    this.shouldBreak = this.shouldBreak.bind(this)\n    this.isNote = this.isNote.bind(this)\n    this.addEmptyExp = this.addEmptyExp.bind(this)\n    this.addEmptyNote = this.addEmptyNote.bind(this)\n\n    this.onRun = this.onRun.bind(this)\n\n    window.addEventListener('hashchange', this.updateFromURL)\n\n    const expression : string = getExpressionFromURL()\n\n    this.state = {\n      editorState : {\n        placeholder : PromptPlaceholder.INIT,\n        expression,\n        caretPosition : expression.length,\n        syntaxError : null,\n        strategy : EvaluationStrategy.NORMAL,\n        singleLetterNames : false,\n        isExercise : false,\n        action : ActionType.ENTER_EXPRESSION,\n        isMarkDown : false,\n      },\n      // singleLetterVars : false,\n      macroTable : { ...HANDY_MACROS, ...getSavedMacros() },\n      submittedExpressions : [],\n      screen : Screen.main,\n      activeBox : -1,\n    }\n  }\n\n  render () {\n    const {\n      editorState : { expression, caretPosition, syntaxError, placeholder, isExercise },\n      // singleLetterVars,\n      macroTable,\n      submittedExpressions,\n      screen,\n      activeBox,\n    } : AppState = this.state\n\n    let shouldRenderEditor : boolean = true\n\n    if (submittedExpressions[activeBox] !== undefined &&\n        submittedExpressions[activeBox].type === BoxType.expression &&\n        (submittedExpressions[activeBox] as EvaluationState).isExercise\n      ) {\n        shouldRenderEditor = false\n      }\n\n      const changeStrategy = (strategy : EvaluationStrategy) =>\n        this.setState({\n          ...this.state,\n          editorState : {\n            ...this.state.editorState,\n            strategy,\n          }\n        })\n\n      const getEditor = () =>\n      <Editor\n        placeholder={ placeholder }\n        expression={ expression }\n        caretPosition={ caretPosition }\n        onExpression={ this.onExpression }\n        onEnter={ this.onEnter }\n        syntaxError={ syntaxError }\n        onRun={ this.onRun }\n        onReset={ this.onClear }\n        strategy={ this.state.editorState.strategy }\n        onStrategy={ (strategy : EvaluationStrategy) => this.setState({\n          ...this.state,\n          editorState : {\n            ...this.state.editorState,\n            strategy,\n          }\n        }) }\n        singleLetterNames={ this.state.editorState.singleLetterNames }\n        onSingleLetterNames={ (enable : boolean) => this.setState({\n          ...this.state,\n          editorState : {\n            ...this.state.editorState,\n            singleLetterNames : enable,\n          }\n        }) }\n        isExercise={ isExercise }\n        onExercise={ (enable : boolean) => this.setState({\n          ...this.state,\n          editorState : {\n            ...this.state.editorState,\n            isExercise : enable,\n          }\n        }) }\n        // onDelete={ this.onRemoveExpression }\n        // onStepBack={ this.onRemoveLastStep }\n        action={ this.state.editorState.action }\n        onActionSelect={ (action : ActionType) => this.setState({\n          ...this.state,\n          editorState : {\n            ...this.state.editorState,\n            action,\n          }\n        }) }\n        onActionClick={ () => {\n          const { editorState : { action } } = this.state\n\n          if (action === ActionType.ENTER_EXPRESSION) {\n            this.onEnter()\n            return\n          }\n          if (action === ActionType.NEXT_STEP) {\n            this.onStep()\n            return\n          }\n          if (action === ActionType.RUN) {\n            // implement\n            return\n          }\n          if (action === ActionType.ENTER_EXERCISE) {\n            this.setState({\n              ...this.state,\n              editorState : {\n                ...this.state.editorState,\n                isExercise : true,\n              }\n            }, () => this.onEnter())\n          }\n          else {\n            // implement or delete \n          }\n        } }\n        isMarkDown={ this.state.editorState.isMarkDown }\n      />\n\n    const getEvaluatorSpace = () =>\n    <EvaluatorSpace\n      removeExpression={ this.onRemoveExpression }\n      updateState={ this.onUpdateEvaluationState }\n      submittedExpressions={ submittedExpressions }\n      editExpression={ (ast : AST, strategy : EvaluationStrategy, singleLetterNames : boolean) =>\n        this.setState({\n          ...this.state,\n          editorState : {\n            placeholder : PromptPlaceholder.INIT,\n            expression : ast.toString(),\n            caretPosition : ast.toString().length,\n            syntaxError : null,\n            strategy,\n            singleLetterNames,\n            isExercise : false, // TODO: jenom momentalni rozhodnuti - popremyslim\n            action : this.state.editorState.action,\n            isMarkDown : this.state.editorState.isMarkDown,\n          }\n        })\n      }\n      activeBox={ activeBox }\n      makeActive={ (index : number) => this.setState({\n        ...this.state,\n        activeBox : index,\n      }) }\n      editor={ getEditor() }\n      addEmptyExp={ this.addEmptyExp }\n      addEmptyNote={ this.addEmptyNote }\n    />\n\n    const getMacroSpace = () =>\n    <MacroSpace\n      macroTable={ macroTable }\n      removeMacro={ this.onRemoveMacro }\n    />\n\n    const notebooks : JSX.Element = (\n      <div>\n        Notebooks are not implemented yet.\n      </div>\n    )\n\n    // const onKeyDown = (event : KeyboardEvent) => {\n    //   if (! event.shiftKey && event.key === 'Enter') {\n    //     event.preventDefault()\n    //     this.onEnter()\n    //   }\n    // }\n\n    // document.onkeydown = onKeyDown\n  \n\n    return (\n      <div className='app'>\n\n        <TopBar\n          state={this.state}\n          onImport={ (state : AppState) => this.setState(state) }\n          onScreenChange={ (screen : Screen) => this.setState({\n            ...this.state,\n            screen,\n          }) }\n         />\n\n\n        <div className='editorSettings'>\n          \n          <Switch\n            checked={ this.state.editorState.singleLetterNames }\n            onChange={ (e : ChangeEvent<HTMLInputElement>) =>\n              this.setState({\n                ...this.state,\n                editorState : {\n                  ...this.state.editorState,\n                  singleLetterNames : e.target.checked,\n                }\n              })\n            }\n            disabled={ this.state.editorState.isMarkDown }\n            shape=\"fill\"\n          >\n              Single Letter Names\n          </Switch>\n\n          <div className='strategies inlineblock'>\n            <p className='stratsLabel inlineblock'>Evaluation Strategies:</p>\n            <Radio style=\"fill\" name=\"strategy\" checked={ this.state.editorState.strategy === EvaluationStrategy.NORMAL } onChange={ () => changeStrategy(EvaluationStrategy.NORMAL) } >Normal</Radio>\n            <Radio style=\"fill\" name=\"strategy\" checked={ this.state.editorState.strategy === EvaluationStrategy.APPLICATIVE } onChange={ () => changeStrategy(EvaluationStrategy.APPLICATIVE) } >Applicative</Radio>\n            {/* <Radio style=\"fill\" name=\"strategy\" checked={ this.state.editorState.strategy === EvaluationStrategy.OPTIMISATION } onChange={ () => changeStrategy(EvaluationStrategy.OPTIMISATION) } >Optimisation</Radio> */}\n          </div>\n          \n\n          {/* <div className='inlineblock'>\n            <Switch\n              checked={ isExercise }\n              onChange={ (e : ChangeEvent<HTMLInputElement>) =>\n                this.setState({\n                  ...this.state,\n                  editorState : {\n                    ...this.state.editorState,\n                    isExercise : e.target.checked,\n                  }\n                })\n              }\n              disabled={ this.state.editorState.isMarkDown }\n              shape=\"fill\"\n            >\n              Exercise Mode\n            </Switch>\n\n            <Switch\n              checked={ this.state.editorState.isMarkDown }\n              onChange={ (e : ChangeEvent<HTMLInputElement>) =>\n                this.setState({\n                  ...this.state,\n                  editorState : {\n                    ...this.state.editorState,\n                    isMarkDown : e.target.checked,\n                  }\n                })\n              }\n              shape=\"fill\"\n            >\n              MarkDown Mode\n            </Switch>\n          </div> */}\n        </div>\n\n        {\n          screen === Screen.main ?\n            getEvaluatorSpace()\n            :\n            screen === Screen.macrolist ?\n              getMacroSpace()\n              :\n              notebooks\n        }\n\n        {/* { getEditor() } */}\n\n        {/* {\n          shouldRenderEditor ?\n            (\n              getEditor()\n            )\n            :\n            null\n        } */}\n\n        {/* <div id=\"anchor\"></div> */}\n\n      </div>\n    )\n  }\n\n  addEmptyNote () : void {\n    console.log('WHHHHHHAAAAT')\n    this.setState({\n      ...this.state,\n      editorState : {\n        ...this.state.editorState,\n        isMarkDown : true,\n      },\n      submittedExpressions : [ ...this.state.submittedExpressions, {\n        type : BoxType.note,\n        __key : Date.now().toString(),\n        note : '',\n        isEditing : true,\n      } ],\n      activeBox : this.state.activeBox + 1,\n    })\n  }\n\n  addEmptyExp () : void {\n    this.setState({\n      ...this.state,\n      editorState : {\n        ...this.state.editorState,\n        isMarkDown : false,\n      },\n      submittedExpressions : [ ...this.state.submittedExpressions, {\n          type : BoxType.expression,\n          __key : Date.now().toString(),\n          expression : '',\n          ast : null,\n          history : [ ],\n          isRunning : false,\n          breakpoints : [],\n          timeoutID : undefined,\n          timeout : 10,\n          isExercise : false,\n          strategy : this.state.editorState.strategy,\n          singleLetterNames : this.state.editorState.singleLetterNames,\n      } ],\n      activeBox : this.state.activeBox + 1,\n    })\n  }\n\n  // TODO: does not have to be in this class\n  updateURL (expression : string) : void {\n    history.pushState({}, \"page title?\", \"#\" + encodeURI(expression))\n  }\n\n  // TODO: does not have to be in this class\n  cancelUpdate () : void {\n    // TODO: this is placeholder for cancel-debounced-function DONT REMOVE\n  }\n\n  onExpression (expression : string, caretPosition : number) : void {\n    this.setState({\n      ...this.state,\n      editorState : {\n        ...this.state.editorState,\n        placeholder : this.state.editorState.placeholder,\n        expression,\n        caretPosition,\n        syntaxError : null,\n      }\n    } )\n    this.updateURL(expression)\n  }\n\n  // TODO: tohle pujde v podstate pryc\n  onUpdateEvaluationState (state : BoxState, index : number) : void {\n    const { submittedExpressions } : AppState = this.state\n\n    submittedExpressions[index] = {\n      ...submittedExpressions[index],\n      ...state,\n    }\n\n    this.setState({\n      ...this.state,\n      submittedExpressions,\n    })\n  }\n\n  onRemoveExpression () {\n    // TODO: implement IMPLEMENT I M P L E M E N T\n    // const { submittedExpressions, macroTable,  } : AppState = this.state\n\n    // const removed : BoxState | undefined = submittedExpressions.pop()\n\n    // if (removed !== undefined && removed.type === BoxType.macro) {\n    //   const name : string = (removed as MacroDefinitionState).macroName\n    //   delete macroTable[name]\n    //   this.updateMacros(macroTable)\n    // }\n\n    // this.setState({\n    //   ...this.state,\n    //   macroTable,\n    //   submittedExpressions\n    // })\n  }\n\n  onRemoveLastStep () {\n    console.log('CURRENTLY NOT IMPEMENTED')\n    // const { submittedExpressions } : AppState = this.state\n\n    // const last : BoxState | undefined = submittedExpressions[submittedExpressions.length - 1]\n    \n\n    // if (last === undefined || last.type !== BoxType.expression) {\n    //   return\n    // }\n\n    // const active : EvaluationState = submittedExpressions[submittedExpressions.length - 1] as EvaluationState\n    \n    // active.\n\n    // this.setState({\n    //   ...this.state,\n    //   submittedExpressions\n    // })\n  }\n\n  //\n  // TODO: refactor heavily PLS\n  onRun () : void {\n    const { submittedExpressions, activeBox } = this.state\n    const activeExpression = submittedExpressions[activeBox]\n\n    if (activeExpression === undefined) {\n      return // maybe in future it will submit first expression and immidiately run it idk\n    }\n\n    if (activeExpression.type === BoxType.expression) {\n      const activeExp = activeExpression as EvaluationState\n\n      if (activeExp.isRunning === false) {\n        this._onRun()\n      }\n      else {\n        this.onStop()\n      }\n    }\n    else {\n      return\n    }\n  }\n\n  onUpdateBoxState (state : BoxState) : void {\n    const { submittedExpressions, activeBox } = this.state\n\n    submittedExpressions[activeBox] = state\n\n    this.setState({\n      ...this.state,\n      submittedExpressions,\n    })\n  }\n\n  _onRun () : void {\n    const { submittedExpressions, activeBox } = this.state\n    const evalState = submittedExpressions[activeBox] as EvaluationState\n\n    const { timeout, history } = evalState\n    const stepRecord = history[history.length - 1]\n  \n    if (stepRecord.isNormalForm) {\n      return\n    }\n    \n    const { ast, step, lastReduction, isNormalForm, message } = stepRecord\n    history.push(history[history.length - 1])\n    // history[history.length - 1].message = 'Skipping some steps...'\n    history[history.length - 2] = { ast : ast.clone(), step, lastReduction, message : 'Skipping some steps...', isNormalForm }\n\n    this.onUpdateBoxState({\n      ...evalState,\n      history,\n      isRunning : true,\n      timeoutID : window.setTimeout(this.__onRun, timeout),\n    })\n  }\n\n  __onRun () {\n    const { submittedExpressions, activeBox } = this.state\n    const evalState = submittedExpressions[activeBox] as EvaluationState\n    \n    let { history, isRunning, breakpoints, timeoutID, timeout, strategy } = evalState\n    const stepRecord : StepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { lastReduction } = stepRecord\n\n    if ( ! isRunning) {\n      return\n    }\n    \n    if (isNormalForm) {\n      this.onUpdateBoxState({\n        ...evalState,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n  \n    let ast : AST = history[history.length - 1].ast\n    const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = normal.nextReduction\n    \n    if (normal.nextReduction instanceof None) {\n      history.pop()\n      history.push({\n        ast,\n        lastReduction : stepRecord.lastReduction,\n        step,\n        message : 'Expression is in normal form.',\n        isNormalForm : true\n      })\n  \n      this.onUpdateBoxState({\n        ...evalState,\n        history,\n        // steps,\n        isRunning : false,\n        timeoutID : undefined,\n      })\n  \n      return\n    }\n  \n    // TODO: maybe refactor a little\n    const breakpoint : Breakpoint | undefined = breakpoints.find(\n      (breakpoint : Breakpoint) =>\n        this.shouldBreak(breakpoint, normal.nextReduction)\n    )\n\n    // if (breakpoint !== undefined\n    //     && history[history.length - 2].step === history[history.length - 1].step) {\n    //   if (normal.nextReduction instanceof Expansion) {\n    //     breakpoint.broken.add(normal.nextReduction.target)\n    //   }\n    //   if (normal.nextReduction instanceof Beta && normal.nextReduction.redex.left instanceof Lambda) {\n    //     breakpoint.broken.add(normal.nextReduction.redex.left.argument)\n    //   }\n    // }\n    // else\n    if (breakpoint !== undefined) {\n      if (normal.nextReduction instanceof Expansion) {\n        breakpoint.broken.add(normal.nextReduction.target)\n      }\n      if (normal.nextReduction instanceof Beta && normal.nextReduction.redex.left instanceof Lambda) {\n        breakpoint.broken.add(normal.nextReduction.redex.left.argument)\n      }\n\n      window.clearTimeout(timeoutID)\n      \n      this.onUpdateBoxState({\n        ...evalState,\n        isRunning : false,\n        breakpoints,\n        timeoutID : undefined,\n      })\n\n      return\n    }\n  \n    ast = normal.perform()\n    // steps++\n\n    history[history.length - 1] = { ast, lastReduction, step : step + 1, message : '', isNormalForm }\n  \n    this.onUpdateBoxState({\n      ...evalState,\n      history,\n      // steps,\n      // lastReduction,\n      timeoutID : window.setTimeout(this.__onRun, timeout),\n    })\n  }\n\n  onStop () : void {\n    const { submittedExpressions, activeBox } = this.state\n    const evalState = submittedExpressions[activeBox] as EvaluationState\n    const { timeoutID } = evalState\n  \n    window.clearTimeout(timeoutID)\n  \n    this.onUpdateBoxState({\n      ...evalState,\n      isRunning : false,\n      timeoutID : undefined\n    })\n  }\n\n  shouldBreak (breakpoint : Breakpoint, reduction : ASTReduction) : boolean {\n    // if (reduction instanceof (breakpoint.type as any)\n    //     && reduction instanceof Beta && breakpoint.context instanceof Lambda\n    //     && reduction.target.identifier === breakpoint.context.body.identifier\n    //   ) {\n    //     return true\n    // }\n    if (reduction instanceof (breakpoint.type as any)\n        && reduction instanceof Beta && breakpoint.context instanceof Variable\n        && reduction.redex.left instanceof Lambda\n        && reduction.redex.left.argument.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.redex.left.argument)\n    ) {\n      return true\n    }\n\n    if (reduction instanceof (breakpoint.type as any)\n        && reduction instanceof Expansion && breakpoint.context instanceof ChurchNumeral\n        && reduction.target.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.target)\n    ) {\n      return true\n    }\n    if (reduction instanceof (breakpoint.type as any)\n        && reduction instanceof Expansion && breakpoint.context instanceof Macro\n        && reduction.target.identifier === breakpoint.context.identifier\n        && ! breakpoint.broken.has(reduction.target)\n    ) {\n      return true\n    }\n  \n    return false\n  }\n\n  onClear () : void {\n    const { submittedExpressions, activeBox } = this.state\n    \n    if (submittedExpressions[activeBox] === undefined) {\n      return\n    }\n\n    if (submittedExpressions[activeBox].type !== BoxType.expression) {\n      return\n    }\n\n    const evalState = submittedExpressions[activeBox] as EvaluationState\n\n    this.onUpdateBoxState({\n      ...evalState,\n      history : [ {\n        ast : (evalState.ast as AST).clone(),\n        lastReduction : None,\n        step : 0,\n        message : '',\n        isNormalForm : false\n      } ],\n      // steps : 0,\n      isRunning : false,\n      // lastReduction : null,\n      breakpoints : [],\n    })\n  }\n\n  // TODO: hope you refactored ^^ heavily\n  //\n\n  onEnter () : void {\n    const { editorState : { expression }, submittedExpressions, activeBox } = this.state\n    const activeExpression : BoxState = submittedExpressions[activeBox]\n\n    if (activeExpression !== undefined && (activeExpression as EvaluationState).isExercise) {\n      this.onExerciseStep()\n    }\n    else if (expression.length || activeExpression === undefined || activeExpression.type !== BoxType.expression) {\n      this.onSubmit()\n    }\n    else {\n      this.onStep()\n    }\n  }\n\n  onExerciseStep () {\n    const { editorState : { expression } } = this.state\n    try {\n      const userAst : AST = this.parseExpression(expression)\n\n      const { submittedExpressions, activeBox } = this.state\n      const evalState : EvaluationState = submittedExpressions[activeBox] as EvaluationState\n      let { history, strategy } = evalState\n      const stepRecord : StepRecord = history[history.length - 1]\n      const { isNormalForm, step } = stepRecord\n      let { ast, lastReduction } = stepRecord\n      ast = ast.clone()\n\n      if (isNormalForm) {\n        // TODO: do something about it\n        // say user - there are no more steps and it is in normal form\n        stepRecord.message = 'No more steps available. Expression is in normal form.'\n\n        this.setState({\n          ...this.state,\n          submittedExpressions,\n        })\n\n        return\n      }\n    \n      // TODO: take evaluation strategy from evalState\n      const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n      lastReduction = normal.nextReduction\n    \n      if (normal.nextReduction instanceof None) {\n        // TODO: refactor PLS - update history\n        // TODO: say user it is in normal form and they are mistaken\n        stepRecord.isNormalForm = true\n        stepRecord.message = 'Expression is already in normal form.'\n        submittedExpressions[activeBox] = {\n          ...evalState,\n          history,\n        }\n\n        this.setState({\n          ...this.state,\n          submittedExpressions,\n        })\n        \n        return\n      }\n    \n      ast = normal.perform()\n    \n      let message : string = ''\n      const comparator : TreeComparator = new TreeComparator([ userAst, ast ])\n      if (comparator.equals) {\n        ast = userAst\n        message = 'Correct.'\n      }\n      else {\n        // TODO: say user it was incorrect\n        // TODO: na to se pouzije uvnitr EvaluatorState prop messages nebo tak neco\n        console.log('Incorrect step')\n        message = `Incorrect step. ${expression}`\n      }\n\n      submittedExpressions[activeBox] = {\n        ...evalState,\n        history : [ ...history, { ast, lastReduction, step : step + 1, message, isNormalForm : false } ],\n      }\n\n      this.setState({\n        ...this.state,\n        editorState : {\n          ...this.state.editorState,\n          expression : '',\n          caretPosition : 0,\n          placeholder : PromptPlaceholder.VALIDATE_MODE,\n          syntaxError : null,\n        },\n        submittedExpressions,\n      })\n\n    } catch (exception) {\n      // TODO: print syntax error\n      // TODO: do it localy - no missuse of onSubmit\n\n      this.onSubmit()\n    }\n  }\n\n  onStep () : void {\n    const { submittedExpressions, activeBox } = this.state\n    const evalState : EvaluationState = submittedExpressions[activeBox] as EvaluationState\n    let { history, strategy } = evalState\n    const stepRecord = history[history.length - 1]\n    const { isNormalForm, step } = stepRecord\n    let { ast, lastReduction } = stepRecord\n    ast = ast.clone()\n  \n    if (isNormalForm) {\n      return\n    }\n\n    const normal : Evaluator = new (strategyToEvaluator(strategy) as any)(ast)\n    lastReduction = normal.nextReduction\n  \n    if (normal.nextReduction instanceof None) {\n      stepRecord.isNormalForm = true\n      stepRecord.message = 'Expression is in normal form.'\n      submittedExpressions[activeBox] = {\n        ...evalState,\n        history,\n      }\n\n      this.setState({\n        ...this.state,\n        submittedExpressions,\n      })\n      \n      return\n    }\n  \n    ast = normal.perform()\n  \n    submittedExpressions[activeBox] = {\n      ...evalState,\n      history : [ ...history, { ast, lastReduction, step : step + 1, message : '', isNormalForm : false } ],\n    }\n\n    this.setState({\n      ...this.state,\n      submittedExpressions,\n    })\n  }\n\n  // TODO: break-down to 3 or so methods\n  onSubmit () : void {\n    // TODO: maybe cancel and clear URL only after succsessful parsing\n    this.cancelUpdate()\n    \n    const { editorState : { expression, caretPosition, },\n    submittedExpressions, macroTable, activeBox } : AppState = this.state\n    \n    // window.location.hash = encodeURI(expression)\n    history.pushState({}, \"\", \"#\" + encodeURI(expression))\n\n    //\n    // TODO: here decide if it is macro\n    // note\n    // expression to evaluate\n    // macro contains := and name must be valid expression - later i will implement own parsing endpoint in core\n    // note starts with # and can contains anything whatever user wants\n    // expression is already implemented and working\n    //\n\n    if (isMacroDefinition(expression)) {\n      history.pushState({}, \"\", \"#\" + encodeURI(''))\n\n      const [macroName, macroExpression] : Array<string> = expression.split(':=').map(trimStr)\n\n      const macroState : MacroDefinitionState = {\n        type : BoxType.macro,\n        __key : Date.now().toString(),\n        macroName,\n        macroExpression,\n      }\n\n      const newMacroTable : MacroMap = {\n        ...macroTable,\n        [macroName] : macroExpression\n      }\n\n      this.setState({\n        ...this.state,\n        editorState : {\n          placeholder : this.state.editorState.placeholder,\n          expression : '',\n          caretPosition : 0,\n          syntaxError : null,\n          strategy : this.state.editorState.strategy,\n          singleLetterNames : this.state.editorState.singleLetterNames,\n          isExercise : this.state.editorState.isExercise,\n          action : this.state.editorState.action,\n          isMarkDown : this.state.editorState.isMarkDown,\n        },\n        submittedExpressions : [ ...submittedExpressions, macroState ],\n        macroTable : newMacroTable,\n        activeBox : submittedExpressions.length - 1,\n      })\n\n      this.updateMacros(newMacroTable)\n    }\n\n    else if (this.isNote(expression)) {\n      history.pushState({}, \"\", \"#\" + encodeURI(''))\n\n      const noteState : NoteState = {\n        type : BoxType.note,\n        __key : Date.now().toString(),\n        note : expression,\n        isEditing : false,\n      }\n\n      submittedExpressions[submittedExpressions.length - 1] = noteState\n\n      this.setState({\n        ...this.state,\n        editorState : {\n          placeholder : this.state.editorState.placeholder,\n          expression : '',\n          caretPosition : 0,\n          syntaxError : null,\n          strategy : this.state.editorState.strategy,\n          singleLetterNames : this.state.editorState.singleLetterNames,\n          isExercise : this.state.editorState.isExercise,\n          action : this.state.editorState.action,\n          isMarkDown : false,\n        },\n        submittedExpressions,\n        activeBox : submittedExpressions.length - 1,\n      })\n    }\n\n    else {\n      try {\n        const ast : AST = this.parseExpression(expression)\n        // window.location.hash = encodeURI('')\n        history.pushState({}, \"\", \"#\" + encodeURI(''))\n  \n        const evaluationState : EvaluationState = {\n          type : BoxType.expression,\n          __key : Date.now().toString(),\n          expression,\n          ast,\n          history : [ { ast : ast.clone(), lastReduction : None, step : 0, message : '', isNormalForm : false } ],\n          // isStepping : false,\n          isRunning : false,\n          breakpoints : [],\n          timeoutID : undefined,\n          timeout : 10,\n          isExercise : this.state.editorState.isExercise,\n          strategy : this.state.editorState.strategy,\n          singleLetterNames : this.state.editorState.singleLetterNames,\n        }\n\n        submittedExpressions[submittedExpressions.length - 1] = evaluationState\n  \n        this.setState({\n          ...this.state,\n          editorState : {\n            placeholder : PromptPlaceholder.EVAL_MODE,\n            expression : '',\n            caretPosition : 0,\n            syntaxError : null,\n            strategy : this.state.editorState.strategy,\n            singleLetterNames : this.state.editorState.singleLetterNames,\n            isExercise : this.state.editorState.isExercise,\n            action : this.state.editorState.action,\n            isMarkDown : this.state.editorState.isMarkDown,\n          },\n          submittedExpressions,\n          activeBox : submittedExpressions.length - 1,\n        })\n    \n      } catch (exception) {\n        this.updateURL(expression)\n        console.log(exception)\n        \n        this.setState({\n          ...this.state,\n          editorState : {\n            placeholder : this.state.editorState.placeholder,\n            expression,\n            caretPosition,\n            syntaxError : exception,\n            strategy : this.state.editorState.strategy,\n            singleLetterNames : this.state.editorState.singleLetterNames,\n            isExercise : this.state.editorState.isExercise,\n            action : this.state.editorState.action,\n            isMarkDown : this.state.editorState.isMarkDown,\n          }\n        })\n      }\n    }\n  }\n\n  updateFromURL () : void {\n    const { editorState : { expression : currentExpr } } : AppState = this.state\n    const expression : string = getExpressionFromURL()\n\n    if (currentExpr === expression) {\n      // breaking cyclic update\n      console.log('ALREADY SYNCED')\n      return\n    }\n\n    this.setState({\n      ...this.state,\n      editorState : {\n        placeholder : this.state.editorState.placeholder,\n        expression,\n        caretPosition : expression.length,\n        syntaxError : null,\n        strategy : this.state.editorState.strategy,\n        singleLetterNames : this.state.editorState.singleLetterNames,\n        isExercise : this.state.editorState.isExercise,\n        action : this.state.editorState.action,\n        isMarkDown : this.state.editorState.isMarkDown,\n      }\n    })\n  }\n\n  // THROWS Exceptions\n  parseExpression (expression : string) : AST {\n    const { macroTable } : AppState = this.state\n    const { singleLetterNames : singleLetterVars } = this.state.editorState\n\n    const tokens : Array<Token> = tokenize(expression, { lambdaLetters : ['λ'], singleLetterVars })\n    const ast : AST = parse(tokens, macroTable)\n\n    return ast\n  }\n\n  onRemoveMacro (name : string) : void {\n    const { macroTable } = this.state\n    \n    const newMacroTable = { ...macroTable }\n    delete newMacroTable[name]\n\n    this.setState({\n      ...this.state,\n      macroTable : newMacroTable\n    })\n\n    this.updateMacros(newMacroTable)\n  }\n\n  updateMacros (macroTable : MacroMap) : void {\n    window.localStorage.setItem('macrotable', JSON.stringify(macroTable))\n  }\n\n  isNote (expression : string) : boolean {\n    return this.state.editorState.isMarkDown\n  }\n}","import { AST, Lambda, Application, Macro, ChurchNumeral, Variable } from \"lambdulus-core\";\n\n///////////////////////////////////////////////////////////////////////////////////////\n\ntype Pair<T> = [T, T]\ntype Triple<T> = [T, T, T]\n\n\n// TODO: fix the public equals interface, maybe public get and private set?\n// maybe implement public get method and bool itself leave private?\n//\n// first I need more trees, I need the previous AST\nexport class TreeComparator {\n  private translator : Map<string, string> = new Map\n  public equals : boolean = true\n  private context : Pair<AST>\n\n  constructor (readonly roots : Pair<AST> ) {\n    [ ...this.context ] = roots\n    // TODO: I need to compare roots first\n    this.compare()\n  }\n\n  compare () : void {\n    /**\n    TODO: compare need to compare both children if got\n    if one of them is incorrect\n    then solve that problem\n    if both of them is incorrect\n    then solve both problems and then decide how both come together\n\n    then I have an instance of knowledge system\n    I can fire up that system in this context (this node with invalid children)\n    system will need to get instance of something to call methods on\n    because system needs to ask questions - like, is this possible,\n    is this error applicable?\n    so instead of human, code will look up the AST and answer the questions\n    so it will be some kind of class which is able to observe all 3 ASTs at the same time\n    it will also have implemented query methods,\n    probably wont be many of them, just few\n    **/\n    \n    const [ left, right ] : Pair<AST> = this.context\n\n    if (left instanceof Lambda && right instanceof Lambda) {\n      const backup : Map<string, string> = new Map(this.translator.entries())\n\n      this.translator.set(left.argument.name(), right.argument.name())\n      this.context = [ left.right, right.right ]\n      this.compare()\n\n      this.translator = backup\n    }\n    else if (left instanceof Application && right instanceof Application) {\n      this.context = [ left.left, right.left ]\n      this.compare()\n\n      if ( ! this.equals) {\n        return\n      }\n\n      this.context = [ left.right, right.right ]\n      this.compare()\n    }\n    else if (left instanceof Macro && right instanceof Macro) {\n      this.equals = left.name() === right.name()\n    }\n    else if (left instanceof ChurchNumeral && right instanceof ChurchNumeral) {\n      this.equals = left.name() === right.name()\n    }\n    else if (left instanceof Variable && right instanceof Variable) {\n      this.equals = this.translator.get(left.name()) === right.name()\n    }\n    else {\n      this.equals = false\n    }\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}